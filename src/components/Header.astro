---
import ThemeToggle from "./ThemeToggle.astro"

const navItems = [
    {
        title: "Experiencia",
        label: "experiencia",
        url: "/#experience"
    },
    {
        title: "Proyectos",
        label: "projects",
        url: "/#projects"
    },
    {
        title: "Sobre mi",
        label: "about",
        url: "/#about"
    },
    {
        title: "Contacto",
        label: "contact",
        url: "mailto:contact@luchoagn.dev"
    },
]
---
<header class="z-10 flex justify-center lg:justify-between items-center py-5 w-full xl:w-[1120px] mx-auto">
    <img class="rounded-full size-12 hidden lg:block" src="https://avatars.githubusercontent.com/u/44987778?s=400&u=116f05c42e8137375199219cea8c64a66ce3047f&v=4" alt="lucho-photo">

    <nav
    class="lg:left-[600px] xl:left-[900px] fixed flex px-3 text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 justify-center items-center"
    >
        {
        navItems.map((link) => (
            <a
            class="relative block px-2 py-2 transition hover:text-yellow-500 dark:hover:text-yellow-400"
            aria-label={link.label}
            href={link.url}
            >
            {link.title}
            </a>
        ))
        }
        <ThemeToggle />
    </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section")
    const navItems = document.querySelectorAll("header nav a")

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-yellow-500")
            } else {
              item.classList.remove("text-yellow-500")
            }
          })
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    })

    sections.forEach((section) => {
      observer.observe(section)
    })

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }
  })
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  @keyframes nav-shadown {
    to {
      @apply shadow-lg ring-1 backdrop-blur dark:bg-gray-800/90 bg-white/50 ring-white/10;
    }
  }
</style>